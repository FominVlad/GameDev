{"version":3,"sources":["models/Api.js","util.js","Menu.js","Board.js","End.js","App.js","serviceWorker.js","index.js"],"names":["TYPES","COLORS","BLACK","WHITE","modifyBoard","board","chips","map","cell","chip","find","x","posX","y","posY","Object","assign","ownerId","Menu","setPlayers","setStatus","setSize","setBoard","setCurrent","useState","dark","setDark","error","setError","name","playerType","player1","setPlayer1","player2","setPlayer2","useEffect","document","body","classList","true","false","obj","setter","nameOnChange","e","target","value","className","onSubmit","preventDefault","first","Math","round","random","players","player","i","playerColour","fetch","URL","method","headers","JSON","stringify","then","res","status","json","data","nextStepPlayerId","size","Array","fill","floor","type","createBoard","for","class","id","onChange","checked","BoardBG","xmlns","width","height","filterUnits","primitiveUnits","colorInterpolationFilters","baseFrequency","numOctaves","seed","result","mode","in","in2","filter","Cell","click","colors","styles","gridColumn","gridRow","background","allowed","style","onClick","owner","Chip","color","viewBox","offset","stopColor","stopOpacity","cx","cy","r","mask","Board","current","setWinner","gridTemplateColumns","gridTemplateRows","playerColors","entries","k","v","p","moves","setMoves","skip","setSkip","makeMove","ps","count","c","length","sort","a","b","console","log","isCpu","m","changedChips","key","join","some","End","winner","App","renderScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ebb2b971.chunk.js","sourcesContent":["const BASE_URL = '';\n\nexport const URL = BASE_URL + '/api/Game';\nexport const START_GAME = 'PUT';\nexport const GET_MOVES = 'GET';\nexport const MAKE_MOVE = 'PATCH';\n\nexport const TYPES = {\n    CPU: 0,\n    PLAYER: 1,\n};\n\nexport const COLORS = {\n    BLACK: 0,\n    WHITE: 1,\n};","export const createBoard = (size, chips = null) => {\n    const board = new Array(size*size).fill(null).map((e, i) => ({x: i % size, y: Math.floor(i / size), type: 'none'}));\n    if (chips) {\n        return modifyBoard(board, chips);\n    } else {\n        return board;\n    }\n}\n\nexport const modifyBoard = (board, chips) => board.map(cell => {\n    const chip = chips.find(chip => cell.x === chip.posX && cell.y === chip.posY);\n    if (chip) {\n        return Object.assign({}, cell, {ownerId: chip.ownerId});\n    } else {\n        return cell;\n    }\n});\n","import React, {useState, useEffect} from 'react'\nimport {URL, START_GAME, COLORS, TYPES} from './models/Api';\nimport { createBoard } from './util';\n// import './Menu.css';\n\nconst size = 8;\n\nconst Menu = ({setPlayers, setStatus, setSize, setBoard, setCurrent}) => {\n    const [dark, setDark] = useState(false);\n    const [error, setError] = useState(null);\n    const [player1, setPlayer1] = useState({\n        name: 'player1',\n        playerType: TYPES.PLAYER,\n    });\n    const [player2, setPlayer2] = useState({\n        name: 'player2',\n        playerType: TYPES.CPU,\n    });\n\n    useEffect(() => {\n        const setter = {\n            true: 'add',\n            false: 'remove',\n        };\n\n        document.body.classList[setter[dark]]('dark');\n    })\n\n    const startGame = e => {\n        e.preventDefault();\n        if (player1.name === player2.name) {\n            setError('Player names should be different');\n            return;\n        }\n        setError(null);\n\n        const first = Math.round(Math.random());\n        const players = [player1, player2].map((player, i) => \n            Object.assign({}, player, {playerColour: (i === first) ? COLORS.BLACK : COLORS.WHITE})\n        );\n        fetch(URL + '?boardSize=' + size, {\n            method: START_GAME,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(players),\n        }).then(res => (res.status === 201) ? res.json() : null)\n        .then(data => \n            data\n            ? (setPlayers(data.players), setCurrent(data.nextStepPlayerId), setBoard(createBoard(size, data.board)), setSize(size), setStatus('game'))\n            : setError('The data you provided is not complete. Please check your info and try again')\n        );\n    }\n\n    const nameOnChange = (obj, setter) => e => setter(Object.assign({}, obj, {name: e.target.value}));\n    const isCpuOnChange = (obj, setter) => e => setter(Object.assign({}, obj, {playerType: e.target.checked ? 0 : 1}));\n\n    return (\n        <div className=\"card-body\">\n            <h1 className=\"card-title\">Menu</h1>\n            <div className=\"center\">\n                {error ? <div className=\"error\">{error}</div> : null}\n                <form onSubmit={startGame}>\n                    <div className=\"form-group row\">\n                        <label for=\"p1name\" class=\"col-sm-4 col-form-label\">Player 1 name</label>\n                        <div class=\"col-sm-8\">\n                            <input type=\"text\" class=\"form-control\" id=\"p1name\" value={player1.name} onChange={nameOnChange(player1, setPlayer1)}/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label for=\"p2name\" class=\"col-sm-4 col-form-label\">Player 2 name</label>\n                        <div class=\"col-sm-8\">\n                            <input type=\"text\" class=\"form-control\" id=\"p2name\" value={player2.name} onChange={nameOnChange(player2, setPlayer2)}/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label for=\"isCpu\" class=\"col-sm-4 col-form-label\">Player 2 is CPU</label>\n                        <div class=\"col-sm-8 col-form-label\">\n                            <input type=\"checkbox\" id=\"isCpu\" checked={player2.playerType === TYPES.CPU} onChange={isCpuOnChange(player2, setPlayer2)}/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label for=\"isDark\" class=\"col-sm-4 col-form-label\">Dark theme</label>\n                        <div class=\"col-sm-8 col-form-label\">\n                            <input type=\"checkbox\" id=\"isDark\" checked={dark} onChange={e => setDark(e.target.checked)}/>\n                        </div>\n                    </div>\n                    <input type=\"submit\" class=\"btn btn-primary\" value=\"Start\"/>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default Menu;","import React, {useState, useEffect} from 'react'\nimport './Board.css';\nimport { URL, COLORS, GET_MOVES, MAKE_MOVE, TYPES } from './models/Api';\nimport { modifyBoard } from './util';\n\nconst Board = ({size, board, players, current, setBoard, setCurrent, setWinner, setStatus}) => {\n    const styles = {\n        gridTemplateColumns: 'repeat('+ size +', 1fr)',\n        gridTemplateRows: 'repeat('+ size +', 1fr)',\n    }\n    \n    const playerColors = Object.entries(COLORS).map(([k, v]) => ({id: players.find(p => p.playerColour === v).id, type: k, color: v}));\n    \n    const [moves, setMoves] = useState([]);\n    const [skip, setSkip] = useState(false);\n    \n    useEffect(() => {\n        if (!players.find(p => p.id === current)) {\n            const ps = players.map(p => ({name: p.name, count: board.filter(c => c.ownerId === p.id).length})).sort((a, b) => b.count - a.count); \n            console.log(ps);\n            setWinner(ps[0].name);\n            setStatus('end');\n        } else {\n            if (players.find(p => p.id === current).playerType === TYPES.CPU) makeMove(0, 0, true)();\n            else {\n                fetch(URL + '?playerId=' + current, {\n                    method: GET_MOVES,\n                }).then(res => (res.status === 200) ? res.json() : null)\n                .then(data => \n                    data\n                    ? setMoves(data)\n                    : null\n                );\n            }\n        }\n    }, [current, skip]);\n    \n    const makeMove = (x, y, isCpu = false) => e => {\n        console.log({isCpu});\n        const move = moves.find(m => m.posX === x && m.posY === y);\n        if (!move && !isCpu) return;\n        fetch(URL + '?playerId=' + current, {\n            method: MAKE_MOVE,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({posX: x, posY: y}),\n        }).then(res => (res.status === 200) ? res.json() : null)\n        .then(data => \n            data\n            ? (setBoard(modifyBoard(board, data.changedChips)), setCurrent(data.nextStepPlayerId), setSkip(data.nextStepPlayerId === current ? !skip : skip))\n            : null\n        );\n    };\n    \n\n    return (\n        <div className=\"card-body text-center\">\n            <h1 className=\"card-title\">{(players.find(p => p.id === current) || {}).name}'s turn</h1>\n            {\n                players.map(p => <p>{p.name}: {board.filter(c => c.ownerId === p.id).length} points</p>)\n            }\n            <div className=\"board-wrapper\">\n                <div className=\"board-container\">\n                    <div className=\"board\">\n                        <div className=\"bg\">\n                            <BoardBG />\n                        </div>\n                        <div className=\"grid\" style={styles}>\n                            {\n                                board.map((cell, i) => <Cell key={[cell.x, cell.y].join(',')} click={makeMove(cell.x, cell.y)} allowed={moves.some(m => m.posX === cell.x && m.posY === cell.y)} colors={playerColors} {...cell} />)\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <button className=\"btn btn-primary mt-4\" onClick={() => setStatus('menu')}>Menu</button>\n        </div>\n    );\n};\n\nconst BoardBG = () => (\n    <svg className=\"img\" xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n            <filter id=\"grain\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" filterUnits=\"objectBoundingBox\" primitiveUnits=\"userSpaceOnUse\" colorInterpolationFilters=\"linearRGB\">\n                <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.4 0.4\" numOctaves=\"3\" seed=\"0\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" result=\"turbulence2\"/>\n                <feBlend mode=\"multiply\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" in=\"SourceGraphic\" in2=\"turbulence2\" result=\"blend\"/>\n            </filter>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" fill=\"green\" filter=\"url(#grain)\" />\n    </svg>\n);\n\nconst Cell = ({x, y, ownerId, click, colors, allowed}) => {\n    const styles = {\n        gridColumn: x+1,\n        gridRow: y+1,\n        background: allowed ? 'radial-gradient(red 6%, transparent 15%)' : 'none',\n    };\n\n    return (\n        <div className=\"cell\" style={styles} onClick={click}>\n            <Chip owner={ownerId} colors={colors}/>\n        </div>\n    );\n};\n\nconst Chip = ({owner, colors}) => {\n    if (typeof owner !== 'undefined') {\n        const type = colors.find(color => color.id === owner).type;\n\n        return (\n            <svg className=\"chip\" viewBox=\"0 0 10 10\">\n                <defs>\n                    <radialGradient id={type + 'grad'}>\n                        <stop offset=\"60%\" stopColor=\"white\" stopOpacity=\"1\" />\n                        <stop offset=\"100%\" stopColor=\"white\" stopOpacity=\"0.8\" />\n                    </radialGradient>\n                    <mask id={type + 'mask'}>\n                        <circle cx=\"5\" cy=\"5\" r=\"5\" fill={'url(#' + type + 'grad)'} />\n                    </mask>\n                </defs>\n                <circle fill={type} mask={'url(#'+type+'mask)'} cx=\"5\" cy=\"5\" r=\"5\"/>\n            </svg>\n        );\n    } else {\n        return null;\n    }\n};\n\nexport default Board;","import React from 'react';\n\nconst End = ({winner, setStatus}) => {\n    return (\n        <div className=\"card-body text-center\">\n            <h1 className=\"card-title\">Winner: {winner}</h1>\n            <button className=\"btn btn-primary\" onClick={() => setStatus('menu')}>Menu</button>\n        </div>\n    );\n};\n\nexport default End;","import React, {useState} from 'react';\nimport Menu from './Menu';\nimport Board from './Board';\nimport './App.css';\nimport End from './End';\n\nfunction App() {\n  const [status, setStatus] = useState('menu');\n  const [board, setBoard] = useState(null);\n  const [players, setPlayers] = useState(null);\n  const [size, setSize] = useState(8);\n  const [current, setCurrent] = useState(0);\n  const [winner, setWinner] = useState(null);\n\n  const renderScreen = status => {\n    switch (status) {\n      case 'menu':\n        return <Menu setStatus={setStatus} setPlayers={setPlayers} setSize={setSize} setBoard={setBoard} setCurrent={setCurrent} />;\n      case 'game':\n        return <Board players={players} size={size} board={board} current={current} setBoard={setBoard} setCurrent={setCurrent} setStatus={setStatus} setWinner={setWinner} />;\n      case 'end':\n        return <End winner={winner} setStatus={setStatus} />\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"container d-flex flex-column justify-content-center\">\n      <div class=\"card\">\n        { renderScreen(status) }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}